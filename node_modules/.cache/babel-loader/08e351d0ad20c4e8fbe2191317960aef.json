{"ast":null,"code":"import axios from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport React from \"react\";\nconst instance = new AxiosMockAdapter(axios, {\n  delayResponse: 0\n});\ninstance.onGet('/pizza/all', {\n  params: {\n    base: \"\",\n    type: \"\",\n    price: \"\"\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Iron Man Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Thor Pizza',\n    crust: 'Flat Bread',\n    cheese: 'Topping',\n    price: '200.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Rainy Pizza',\n    crust: 'Multigrain',\n    cheese: 'No',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }, {\n    name: 'Thanos Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/nonveg.jpg\"\n  }, {\n    name: 'Nazi Pizza',\n    crust: 'Flat Bread',\n    cheese: 'Topping',\n    price: '200.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\nconsole.log(instance);\ninstance.onGet(\"/pizza/all\", {\n  params: {\n    crust: \"thin\"\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }]\n});","map":{"version":3,"sources":["/Users/kshitijkapure/WebstormProjects/pizza/src/Mock/PizzaMock.js"],"names":["axios","AxiosMockAdapter","React","instance","delayResponse","onGet","params","base","type","price","reply","veg","name","crust","cheese","image","nonVeg","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAG,IAAIF,gBAAJ,CAAqBD,KAArB,EAA4B;AAAEI,EAAAA,aAAa,EAAE;AAAjB,CAA5B,CAAjB;AAEAD,QAAQ,CAACE,KAAT,CAAe,YAAf,EAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAGC,IAAAA,IAAI,EAAE,EAAT;AAAaC,IAAAA,IAAI,EAAE,EAAnB;AAAuBC,IAAAA,KAAK,EAAE;AAA9B;AAAV,CAA7B,EAA6EC,KAA7E,CAAmF,GAAnF,EAAwF;AACpFC,EAAAA,GAAG,EAAE,CACD;AACIC,IAAAA,IAAI,EAAE,cADV;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GADC,EAQD;AACIH,IAAAA,IAAI,EAAE,gBADV;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GARC,EAeD;AACIH,IAAAA,IAAI,EAAE,YADV;AAEIC,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,MAAM,EAAE,SAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GAfC,EAsBD;AACIH,IAAAA,IAAI,EAAE,aADV;AAEIC,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,MAAM,EAAE,IAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GAtBC,CAD+E;AA+BpFC,EAAAA,MAAM,EAAE,CACJ;AACIJ,IAAAA,IAAI,EAAE,YADV;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GADI,EAQJ;AACIH,IAAAA,IAAI,EAAE,cADV;AAEIC,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GARI,EAeJ;AACIH,IAAAA,IAAI,EAAE,YADV;AAEIC,IAAAA,KAAK,EAAE,YAFX;AAGIC,IAAAA,MAAM,EAAE,SAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GAfI;AA/B4E,CAAxF;AAwDAE,OAAO,CAACC,GAAR,CAAYf,QAAZ;AACAA,QAAQ,CAACE,KAAT,CAAe,YAAf,EAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAEO,IAAAA,KAAK,EAAE;AAAT;AAAV,CAA7B,EAA4DH,KAA5D,CAAkE,GAAlE,EAAuE;AACnEC,EAAAA,GAAG,EAAE,CACD;AACIC,IAAAA,IAAI,EAAE,cADV;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GADC,CAD8D;AAUnEC,EAAAA,MAAM,EAAE,CACJ;AACIJ,IAAAA,IAAI,EAAE,YADV;AAEIC,IAAAA,KAAK,EAAE,MAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIL,IAAAA,KAAK,EAAE,QAJX;AAKIM,IAAAA,KAAK,EAAE;AALX,GADI;AAV2D,CAAvE","sourcesContent":["import axios from 'axios'\n\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport React from \"react\";\n\nconst instance = new AxiosMockAdapter(axios, { delayResponse: 0 });\n\ninstance.onGet('/pizza/all', { params: {  base: \"\", type: \"\", price: \"\" } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Iron Man Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Thor Pizza',\n            crust: 'Flat Bread',\n            cheese: 'Topping',\n            price: '200.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Rainy Pizza',\n            crust: 'Multigrain',\n            cheese: 'No',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n        {\n            name: 'Thanos Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/nonveg.jpg\"\n        },\n        {\n            name: 'Nazi Pizza',\n            crust: 'Flat Bread',\n            cheese: 'Topping',\n            price: '200.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\nconsole.log(instance);\ninstance.onGet(\"/pizza/all\", { params: { crust: \"thin\" } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n"]},"metadata":{},"sourceType":"module"}