{"ast":null,"code":"import axios from 'axios';\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport React from \"react\";\nconst instance = new AxiosMockAdapter(axios, {\n  delayResponse: 0\n});\ninstance.onGet('/pizza/all', {\n  params: {\n    base: null,\n    type: null\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Iron Man Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Thor Pizza',\n    crust: 'Flat Bread',\n    cheese: 'Topping',\n    price: '200.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Rainy Pizza',\n    crust: 'Multigrain',\n    cheese: 'No',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }, {\n    name: 'Thanos Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/nonveg.jpg\"\n  }, {\n    name: 'Nazi Pizza',\n    crust: 'Flat Bread',\n    cheese: 'Topping',\n    price: '200.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\ninstance.onGet(\"/pizza/all/crust\", {\n  params: {\n    base: \"thin\",\n    type: null\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\ninstance.onGet(\"/pizza/all/crust\", {\n  params: {\n    base: \"regular\",\n    type: null\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Iron Man Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Thanos Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\ninstance.onGet(\"/pizza/all/crust\", {\n  params: {\n    base: \"flat\",\n    type: null\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\ninstance.onGet(\"/pizza/all/crust\", {\n  params: {\n    base: \"multigrain\",\n    type: null\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }]\n});\ninstance.onGet(\"/pizza/all/type\", {\n  params: {\n    base: \"thin\",\n    type: \"cheese\"\n  }\n}).reply(200, {\n  veg: [{\n    name: 'Batman Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '300.00',\n    image: \"/pizzaveg1.jpg\"\n  }, {\n    name: 'Iron Man Pizza',\n    crust: 'Regular',\n    cheese: 'Burst',\n    price: '500.00',\n    image: \"/pizzaveg1.jpg\"\n  }],\n  nonVeg: [{\n    name: 'Loki Pizza',\n    crust: 'Thin',\n    cheese: 'Burst',\n    price: '600.00',\n    image: \"/nonveg.jpg\"\n  }]\n});","map":{"version":3,"sources":["/Users/kshitijkapure/WebstormProjects/pizza/src/Mock/PizzaMock.js"],"names":["axios","AxiosMockAdapter","React","instance","delayResponse","onGet","params","base","type","reply","veg","name","crust","cheese","price","image","nonVeg"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nimport AxiosMockAdapter from 'axios-mock-adapter';\nimport React from \"react\";\n\nconst instance = new AxiosMockAdapter(axios, { delayResponse: 0 });\n\ninstance.onGet('/pizza/all', { params: {  base: null, type: null } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Iron Man Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Thor Pizza',\n            crust: 'Flat Bread',\n            cheese: 'Topping',\n            price: '200.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Rainy Pizza',\n            crust: 'Multigrain',\n            cheese: 'No',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n        {\n            name: 'Thanos Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/nonveg.jpg\"\n        },\n        {\n            name: 'Nazi Pizza',\n            crust: 'Flat Bread',\n            cheese: 'Topping',\n            price: '200.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\ninstance.onGet(\"/pizza/all/crust\", { params: { base: \"thin\", type: null } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\n\ninstance.onGet(\"/pizza/all/crust\", { params: { base: \"regular\", type: null } }).reply(200, {\n    veg: [\n        {\n            name: 'Iron Man Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Thanos Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\ninstance.onGet(\"/pizza/all/crust\", { params: { base: \"flat\", type: null } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\ninstance.onGet(\"/pizza/all/crust\", { params: { base: \"multigrain\", type: null } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n\n\ninstance.onGet(\"/pizza/all/type\", { params: { base: \"thin\", type: \"cheese\"  } }).reply(200, {\n    veg: [\n        {\n            name: 'Batman Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '300.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n        {\n            name: 'Iron Man Pizza',\n            crust: 'Regular',\n            cheese: 'Burst',\n            price: '500.00',\n            image: \"/pizzaveg1.jpg\"\n        },\n    ],\n    nonVeg: [\n        {\n            name: 'Loki Pizza',\n            crust: 'Thin',\n            cheese: 'Burst',\n            price: '600.00',\n            image: \"/nonveg.jpg\"\n        },\n    ],\n});\n"]},"metadata":{},"sourceType":"module"}